[{"component":{"scope":"bit.utils","name":"flat-map","box":"array","impl":{"file":"/** @flow */\n\n/**\n * Builds a new collection by applying a function to all elements of \n * this array and using the elements of the resulting collections.\n * @name flatMap\n * @param {[*]} array\n * @param {Function} cb\n * @returns {[*]}\n * @example\n * ```js\n *  flatMap([[1, 2, 3], [4, 5, 6]], val => val) // => [1, 2, 3, 4, 5, 6]\n * ```\n */\nmodule.exports = function flatMap(array: any[], cb: (val: any, key: number) => any[]) {\n  return Array.prototype.concat.apply([], array.map(cb));\n};\n","name":"impl.js"},"specs":{"file":"import { expect } from 'chai';\n\nconst flatMap = require(__impl__);\n\ndescribe('#flatMap()', () => {\n  it('should flatten the multi-dimensional array to a single-dimensional one ', () => {\n    const array = [[1, 2, 3], [4, 5, 6]];\n    expect(flatMap(array, val => val)).to.deep.equal([1, 2, 3, 4, 5, 6]);\n  });\n\n  it('should flatten to a single-dimensional array without odd numbers', () => {\n    const array = [[1, 2, 3], [4, 5, 6]];\n    expect(flatMap(array, nums => nums.filter(n => n % 2 === 0)))\n      .to.deep.equal([2, 4, 6]);\n  });\n\n  it('should throw a type error in case the first argument is not an array', () => {\n    expect(() => {\n      flatMap();\n    }).to.throw();\n  });\n\n  it('should throw a type error in case the second argument is not a function', () => {\n    expect(() => {\n      flatMap([]);\n    }).to.throw();\n  });\n});\n","name":"spec.js"},"dist":{"file":"\"use strict\";\n\n/**\n * Builds a new collection by applying a function to all elements of \n * this array and using the elements of the resulting collections.\n * @name flatMap\n * @param {[*]} array\n * @param {Function} cb\n * @returns {[*]}\n * @example\n * ```js\n *  flatMap([[1, 2, 3], [4, 5, 6]], val => val) // => [1, 2, 3, 4, 5, 6]\n * ```\n */\nmodule.exports = function flatMap(array, cb) {\n  return Array.prototype.concat.apply([], array.map(cb));\n};","name":"dist.js"},"compiler":"bit.envs/compilers/flow::latest","tester":"bit.envs/testers/mocha-chai::latest","log":{"message":"initial commit","date":"1487178184111","username":"Ran Mizrahi","email":"ran@cocycles.com"},"dependencies":[],"docs":[{"name":"flatMap","description":"Builds a new collection by applying a function to all elements of \nthis array and using the elements of the resulting collections.","args":[{"description":null,"type":"[*]","name":"array"},{"description":null,"type":"Function","name":"cb"}],"returns":{"description":null,"type":"[*]"},"access":"public","examples":[{"raw":"```js\n flatMap([[1, 2, 3], [4, 5, 6]], val => val) // => [1, 2, 3, 4, 5, 6]\n```","code":"```js\nflatMap([[1, 2, 3], [4, 5, 6]], val => val) // => [1, 2, 3, 4, 5, 6]\n```"}],"static":false}],"ci":{},"specsResults":{"tests":[{"title":"#flatMap() should flatten the multi-dimensional array to a single-dimensional one ","pass":true,"err":null,"duration":2},{"title":"#flatMap() should flatten to a single-dimensional array without odd numbers","pass":true,"err":null,"duration":0},{"title":"#flatMap() should throw a type error in case the first argument is not an array","pass":true,"err":null,"duration":2},{"title":"#flatMap() should throw a type error in case the second argument is not a function","pass":true,"err":null,"duration":0}],"stats":{"start":"2017-02-15T17:03:04.095Z","end":"2017-02-15T17:03:04.104Z","duration":9},"pass":true},"flattenedDependencies":[],"packageDependencies":{},"version":"0"},"dependencies":[]},{"component":{"scope":"bit.utils","name":"diff","box":"array","impl":{"file":"/** @flow */\n\n/**\n * compute the difference between two array references. \n * @name diff\n * @param {[]} firstArray \n * @param {[]} secondArray\n * @returns {[]} returns an array representing the difference between the two arrays\n * @example\n * ```js\n *  diff([1,2,3], [1,2,3,4,5]) // => [4,5]\n * ```\n */\nmodule.exports = function diff(firstArray: any[], secondArray: any[]): any[] {\n  return firstArray.concat(secondArray).filter((val) => {\n    return !(firstArray.includes(val) && secondArray.includes(val));\n  });\n};\n","name":"impl.js"},"specs":{"file":"const { expect } = require('chai');\n\nconst diff = require(__impl__);\n\ndescribe('#array/diff()', () => {\n  it('should return an empty array as both arrays are equal', () => {\n    return expect(diff([1, 2, 3], [1, 2, 3])).to.deep.equal([]);\n  });\n\n  it('should return the difference between the two arrays (1, 5, 6)', () => {\n    return expect(diff([2, 3], [1, 2, 3, 5, 6])).to.deep.equal([1, 5, 6]);\n  });  \n});\n","name":"spec.js"},"dist":{"file":"\"use strict\";\n\n/**\n * compute the difference between two array references. \n * @name diff\n * @param {[]} firstArray \n * @param {[]} secondArray\n * @returns {[]} returns an array representing the difference between the two arrays\n * @example\n * ```js\n *  diff([1,2,3], [1,2,3,4,5]) // => [4,5]\n * ```\n */\nmodule.exports = function diff(firstArray, secondArray) {\n  return firstArray.concat(secondArray).filter(function (val) {\n    return !(firstArray.includes(val) && secondArray.includes(val));\n  });\n};","name":"dist.js"},"compiler":"bit.envs/compilers/flow::latest","tester":"bit.envs/testers/mocha-chai::latest","log":{"message":"initial commit","date":"1487178162065","username":"Ran Mizrahi","email":"ran@cocycles.com"},"dependencies":[],"docs":[{"name":"diff","description":"compute the difference between two array references.","args":[{"description":null,"type":"[]","name":"firstArray"},{"description":null,"type":"[]","name":"secondArray"}],"returns":{"description":"returns an array representing the difference between the two arrays","type":"[]"},"access":"public","examples":[{"raw":"```js\n diff([1,2,3], [1,2,3,4,5]) // => [4,5]\n```","code":"```js\ndiff([1,2,3], [1,2,3,4,5]) // => [4,5]\n```"}],"static":false}],"ci":{},"specsResults":{"tests":[{"title":"#array/diff() should return an empty array as both arrays are equal","pass":true,"err":null,"duration":2},{"title":"#array/diff() should return the difference between the two arrays (1, 5, 6)","pass":true,"err":null,"duration":0}],"stats":{"start":"2017-02-15T17:02:42.050Z","end":"2017-02-15T17:02:42.056Z","duration":6},"pass":true},"flattenedDependencies":[],"packageDependencies":{},"version":"0"},"dependencies":[]},{"component":{"scope":"bit.utils","name":"values","box":"object","impl":{"file":"/** @flow */\nimport bit from 'bit-js';\n\nconst forEach = bit('object/foreach');\n\n/**\n * get all object values.\n * @name values\n * @param {object} object\n * @returns {[]} object's values\n * @example\n * ```js\n *  values({ a: 1, b: 2, c: 3 }) // => [1, 2, 3]\n * ```\n */\nmodule.exports = function values(object: {[any]: any}): any[] {\n  const objValues = [];\n  forEach(object, val => objValues.push(val)); \n  return objValues;\n};\n","name":"impl.js"},"specs":{"file":"import { expect } from 'chai';\nimport bit from 'bit-js';\n\nbit.mockComponents({\n  'object/foreach': (obj, fn) => fn('foo')\n});\n\nconst values = require(__impl__);\n\nconst mock = { \n  a: 'foo',\n  b: 'bar'\n};\n\ndescribe('#values()', () => {\n  it('should return values `foo` from object', () => {\n    expect(values(mock)).to.deep.equal(['foo']);\n  });\n});\n","name":"spec.js"},"dist":{"file":"'use strict';\n\nvar _bitJs = require('bit-js');\n\nvar _bitJs2 = _interopRequireDefault(_bitJs);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar forEach = (0, _bitJs2.default)('object/foreach');\n\n/**\n * get all object values.\n * @name values\n * @param {object} object\n * @returns {[]} object's values\n * @example\n * ```js\n *  values({ a: 1, b: 2, c: 3 }) // => [1, 2, 3]\n * ```\n */\n\nmodule.exports = function values(object) {\n  var objValues = [];\n  forEach(object, function (val) {\n    return objValues.push(val);\n  });\n  return objValues;\n};","name":"dist.js"},"compiler":"bit.envs/compilers/flow::latest","tester":"bit.envs/testers/mocha-chai::latest","log":{"message":"initial commit","date":"1487178628236","username":"Ran Mizrahi","email":"ran@cocycles.com"},"dependencies":["bit.utils/object/foreach::1"],"docs":[{"name":"values","description":"get all object values.","args":[{"description":null,"type":"object","name":"object"}],"returns":{"description":"object's values","type":"[]"},"access":"public","examples":[{"raw":"```js\n values({ a: 1, b: 2, c: 3 }) // => [1, 2, 3]\n```","code":"```js\nvalues({ a: 1, b: 2, c: 3 }) // => [1, 2, 3]\n```"}],"static":false}],"ci":{},"specsResults":{"tests":[{"title":"#values() should return values `foo` from object","pass":true,"err":null,"duration":3}],"stats":{"start":"2017-02-15T17:10:28.223Z","end":"2017-02-15T17:10:28.228Z","duration":5},"pass":true},"flattenedDependencies":["bit.utils/object/foreach::1"],"packageDependencies":{},"version":"0"},"dependencies":[{"scope":"bit.utils","name":"foreach","box":"object","impl":{"file":"/** @flow */\nexport type CbFn = (val: any, key: string|number) => void;\n\n/**\n * invoke `cb` function for every key within given object or array.\n * @name forEach\n * @param {object} obj object or array to iterate \n * @param {function} cb callback function to invoke\n * @example \n * ```js\n *  forEach({ a: 1, b: 2, c: 3 }, (val, key) => console.log(key, val));\n *  // => a 1 b 2 c 3\n * ```\n */\nmodule.exports = function forEach(obj: {[string|number]: any}, cb: CbFn) {\n  const keys = Object.keys(obj);\n  keys.forEach(key => cb(obj[key], key));\n};\n","name":"impl.js"},"specs":{"file":"import { expect } from 'chai';\n\nconst forEach = require(__impl__);\n\ndescribe('#forEach()', () => {\n  const mock = {\n    a: 1,\n    b: 2,\n    c: 3\n  };\n\n  const mockArray = ['a', 'b', 'c', 'd'];\n\n  it('should invoke `cb` for every key within given object', () => {\n    const targetKeys = Object.keys(mock);\n    const invokedKeys = [];\n\n    forEach(mock, (val, key) => {\n      invokedKeys.push(key);\n    });\n\n    expect(targetKeys).to.deep.equal(targetKeys);\n  });\n\n  it('should invoke `cb` for every key within given array', () => {\n    const arrKeys = Object.keys(mockArray);\n    const invokedKeys = [];\n\n    forEach(mockArray, (val, key) => {\n      invokedKeys.push(key);\n    });\n\n    expect(arrKeys).to.deep.equal(invokedKeys);    \n  });\n});\n","name":"spec.js"},"dist":{"file":"\"use strict\";\n\n/**\n * invoke `cb` function for every key within given object or array.\n * @name forEach\n * @param {object} obj object or array to iterate \n * @param {function} cb callback function to invoke\n * @example \n * ```js\n *  forEach({ a: 1, b: 2, c: 3 }, (val, key) => console.log(key, val));\n *  // => a 1 b 2 c 3\n * ```\n */\nmodule.exports = function forEach(obj, cb) {\n  var keys = Object.keys(obj);\n  keys.forEach(function (key) {\n    return cb(obj[key], key);\n  });\n};","name":"dist.js"},"compiler":"bit.envs/compilers/flow::latest","tester":"bit.envs/testers/mocha-chai::latest","log":{"message":"initial commit","date":"1487178345233","username":"Ran Mizrahi","email":"ran@cocycles.com"},"dependencies":[],"docs":[{"name":"forEach","description":"invoke `cb` function for every key within given object or array.","args":[{"description":"object or array to iterate","type":"object","name":"obj"},{"description":"callback function to invoke","type":"function","name":"cb"}],"returns":{},"access":"public","examples":[{"raw":"```js\n forEach({ a: 1, b: 2, c: 3 }, (val, key) => console.log(key, val));\n // => a 1 b 2 c 3\n```","code":"```js\nforEach({ a: 1, b: 2, c: 3 }, (val, key) => console.log(key, val));"}],"static":false}],"ci":{},"specsResults":{"tests":[{"title":"#forEach() should invoke `cb` for every key within given object","pass":true,"err":null,"duration":1},{"title":"#forEach() should invoke `cb` for every key within given array","pass":true,"err":null,"duration":1}],"stats":{"start":"2017-02-15T17:05:45.220Z","end":"2017-02-15T17:05:45.227Z","duration":7},"pass":true},"flattenedDependencies":[],"packageDependencies":{},"version":"0"}]},{"component":{"scope":"bit.promise","name":"promisify","box":"global","impl":{"file":"/** @flow */\n\n/**\n * Returns a function that will wrap the given node function with a promise. \n * Instead of taking a callback, the returned function will return a promise whose resolved in case \n * the second node function argument is falsy, in case the promise is resolved the \n * first argument will be passed.\n * The node function should conform to node.js convention of accepting a callback as last * * \n * argument and calling that callback with error as the first argument and success value \n * on the second argument. \n * @name promisify\n * @param {function} fn function to be wrapped as promise.\n * @returns {function} promisfied function\n * @example\n * ```js\n *  const read = promisify(fs.readFile);\n *  read('/path/to/file')\n *  .then(data => console.log(data))\n *  .catch(err => console.error(err));\n * ```\n */\nmodule.exports = function promisify(fn: (...args: any[]) => any) {\n  return (...args: any[]): Promise<any> => {\n    return new Promise((resolve, reject) => {\n      fn(...args, (err, res) => {\n        if (err) return reject(err);\n        return resolve(res);\n      });\n    });\n  };\n};\n","name":"impl.js"},"specs":{"file":"import { expect } from 'chai';\n\nconst promisify = require(__impl__);\n\ndescribe('#promisify', () => {\n  it('should wrap errFn with a promise and expect a failure', () => {\n    const errFn = (cb) => {\n      cb(new Error());\n    };\n\n    promisify(errFn)().catch((err) => {\n      expect(err).to.deep.equal(new Error());\n    });\n  });\n\n  it('should wrap dataFn with a promise and expect string `foo`', () => {\n    const dataFn = (cb) => {\n      cb(null, 'foo');\n    };\n\n    promisify(dataFn)().then(str => expect(str).to.equal('foo'));\n  });\n});\n","name":"spec.js"},"dist":{"file":"\"use strict\";\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * Returns a function that will wrap the given node function with a promise. \n * Instead of taking a callback, the returned function will return a promise whose resolved in case \n * the second node function argument is falsy, in case the promise is resolved the \n * first argument will be passed.\n * The node function should conform to node.js convention of accepting a callback as last * * \n * argument and calling that callback with error as the first argument and success value \n * on the second argument. \n * @name promisify\n * @param {function} fn function to be wrapped as promise.\n * @returns {function} promisfied function\n * @example\n * ```js\n *  const read = promisify(fs.readFile);\n *  read('/path/to/file')\n *  .then(data => console.log(data))\n *  .catch(err => console.error(err));\n * ```\n */module.exports = function promisify(fn) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new Promise(function (resolve, reject) {\n      fn.apply(undefined, _toConsumableArray(args).concat([function (err, res) {\n        if (err) return reject(err);\n        return resolve(res);\n      }]));\n    });\n  };\n};","name":"dist.js"},"compiler":"bit.envs/compilers/flow::latest","tester":"bit.envs/testers/mocha-chai::latest","log":{"message":"initial commit","date":"1487255358963","username":"Ran Mizrahi","email":"ran@cocycles.com"},"dependencies":[],"docs":[{"name":"promisify","description":"Returns a function that will wrap the given node function with a promise. \nInstead of taking a callback, the returned function will return a promise whose resolved in case \nthe second node function argument is falsy, in case the promise is resolved the \nfirst argument will be passed.\nThe node function should conform to node.js convention of accepting a callback as last * * \nargument and calling that callback with error as the first argument and success value \non the second argument.","args":[{"description":"function to be wrapped as promise.","type":"function","name":"fn"}],"returns":{"description":"promisfied function","type":"function"},"access":"public","examples":[{"raw":"```js\n const read = promisify(fs.readFile);\n read('/path/to/file')\n .then(data => console.log(data))\n .catch(err => console.error(err));\n```","code":"```js\nconst read = promisify(fs.readFile);\nread('/path/to/file')\n.then(data => console.log(data))\n.catch(err => console.error(err));\n```"}],"static":false}],"ci":{},"specsResults":{"tests":[{"title":"#promisify should wrap errFn with a promise and expect a failure","pass":true,"err":null,"duration":1},{"title":"#promisify should wrap dataFn with a promise and expect string `foo`","pass":true,"err":null,"duration":0}],"stats":{"start":"2017-02-16T14:29:18.949Z","end":"2017-02-16T14:29:18.956Z","duration":7},"pass":true},"flattenedDependencies":[],"packageDependencies":{},"version":"0"},"dependencies":[]}]